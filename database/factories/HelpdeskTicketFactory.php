<?php

namespace Database\Factories;

use App\Models\HelpdeskTicket;
use App\Models\HelpdeskCategory;
use App\Models\HelpdeskPriority;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Carbon;

/**
 * Factory for the HelpdeskTicket model.
 *
 * Generates helpdesk tickets for testing and seeding,
 * including all required fields, blameable/audit columns, and soft-delete columns.
 */
class HelpdeskTicketFactory extends Factory
{
    protected $model = HelpdeskTicket::class;

    public function definition(): array
    {
        // Use Malaysian locale for description realism
        $msFaker = \Faker\Factory::create('ms_MY');

        // Find or create related models for foreign keys
        $applicantId = User::inRandomOrder()->value('id') ?? User::factory()->create(['name' => 'Applicant (HelpdeskTicketFactory)'])->id;
        $createdBy = $applicantId;
        $updatedBy = $applicantId;
        $assignedToId = User::inRandomOrder()->value('id') ?? User::factory()->create(['name' => 'Agent (HelpdeskTicketFactory)'])->id;

        $categoryId = HelpdeskCategory::inRandomOrder()->value('id') ?? HelpdeskCategory::factory()->create()->id;
        $priorityId = HelpdeskPriority::inRandomOrder()->value('id') ?? HelpdeskPriority::factory()->create()->id;

        // Ticket status options
        $statuses = ['open', 'in_progress', 'pending', 'resolved', 'closed', 'reopened', 'cancelled'];
        $status = $this->faker->randomElement($statuses);

        // Ticket dates
        $createdAt = Carbon::parse($this->faker->dateTimeBetween('-6 months', 'now'));
        $updatedAt = Carbon::parse($this->faker->dateTimeBetween($createdAt, 'now'));

        // Closed by and closed at (if closed)
        $closedBy = null;
        $closedAt = null;
        if (in_array($status, ['closed', 'resolved', 'cancelled'])) {
            $closedBy = $assignedToId;
            $closedAt = Carbon::parse($this->faker->dateTimeBetween($updatedAt, 'now'));
        }

        // Mark as soft deleted (rare)
        $isDeleted = $this->faker->boolean(2); // ~2% soft deleted
        $deletedAt = $isDeleted ? Carbon::parse($this->faker->dateTimeBetween($updatedAt, 'now')) : null;
        $deletedBy = $isDeleted ? $createdBy : null;

        // Ticket reference number (optional: can be auto-generated by model)
        $referenceNumber = strtoupper('HD-' . $this->faker->unique()->bothify('#####'));

        return [
            'reference_number'   => $referenceNumber,
            'title'              => $msFaker->sentence(6),
            'description'        => $msFaker->paragraph(3),
            'status'             => $status,
            'category_id'        => $categoryId,
            'priority_id'        => $priorityId,
            'applicant_id'       => $applicantId,
            'assigned_to_id'     => $assignedToId,
            'resolution_notes'   => $this->faker->optional(0.3)->sentence(8),
            'closed_by'          => $closedBy,
            'closed_at'          => $closedAt,
            'created_by'         => $createdBy,
            'updated_by'         => $updatedBy,
            'deleted_by'         => $deletedBy,
            'created_at'         => $createdAt,
            'updated_at'         => $updatedAt,
            'deleted_at'         => $deletedAt,
        ];
    }

    /**
     * State for an open ticket.
     */
    public function open(): static
    {
        return $this->state([
            'status' => 'open',
            'closed_by' => null,
            'closed_at' => null,
        ]);
    }

    /**
     * State for a closed ticket.
     */
    public function closed(): static
    {
        $userId = User::inRandomOrder()->value('id') ?? User::factory()->create()->id;
        return $this->state([
            'status' => 'closed',
            'closed_by' => $userId,
            'closed_at' => now(),
        ]);
    }

    /**
     * State for a ticket assigned to a specific user.
     */
    public function assignedTo(User|int $user): static
    {
        $userId = $user instanceof User ? $user->id : $user;
        return $this->state([
            'assigned_to_id' => $userId,
        ]);
    }

    /**
     * State for a ticket under a specific category.
     */
    public function forCategory(HelpdeskCategory|int $category): static
    {
        $categoryId = $category instanceof HelpdeskCategory ? $category->id : $category;
        return $this->state([
            'category_id' => $categoryId,
        ]);
    }

    /**
     * State for a ticket with a specific priority.
     */
    public function withPriority(HelpdeskPriority|int $priority): static
    {
        $priorityId = $priority instanceof HelpdeskPriority ? $priority->id : $priority;
        return $this->state([
            'priority_id' => $priorityId,
        ]);
    }

    /**
     * State for a soft-deleted ticket.
     */
    public function deleted(): static
    {
        $deleterId = User::inRandomOrder()->value('id') ?? User::factory()->create(['name' => 'Deleter User (HelpdeskTicketFactory)'])->id;
        return $this->state([
            'deleted_at' => now(),
            'deleted_by' => $deleterId,
        ]);
    }
}
